/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing18thdec_stage.newtestdbpostgres.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.annotation.JsonView;
import com.wavemaker.commons.json.views.JsonViews.BlobAsUrlView;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testing18thdec_stage.newtestdbpostgres.service.NewtestdbpostgresQueryExecutorService;
import com.testing18thdec_stage.newtestdbpostgres.models.query.*;

@RestController(value = "Newtestdbpostgres.QueryExecutionController")
@RequestMapping("/newtestdbpostgres/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private NewtestdbpostgresQueryExecutorService queryService;

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_GetSingleRecord", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetSingleRecord")
    public SvGetSingleRecordResponse executeSV_GetSingleRecord(@RequestParam(value = "PK_ID") Integer pkId, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetSingleRecord");
        SvGetSingleRecordResponse _result = queryService.executeSV_GetSingleRecord(pkId);
        LOGGER.debug("got the result for named query: SV_GetSingleRecord, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/content/{_fieldName_}");
        if(_result.getBlobCol() != null) {
            _result.setBlobCol(_uriBuilder.buildAndExpand(Collections.singletonMap("_fieldName_", "blobCol")).toUriString().getBytes());
        } else {
            _result.setBlobCol(null);
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_GetSingleRecord")
    @RequestMapping(value = "/queries/SV_GetSingleRecord/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_GetSingleRecord(@RequestParam(value = "PK_ID") Integer pkId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_GetSingleRecord");

        InputStream _result = queryService.getBlobColContentForSV_GetSingleRecord(pkId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @JsonView(BlobAsUrlView.class)
    @RequestMapping(value = "/queries/SV_AllTypesTable", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "All Types Table")
    public Page<SvAllTypesTableResponse> executeSV_AllTypesTable(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AllTypesTable");
        Page<SvAllTypesTableResponse> _result = queryService.executeSV_AllTypesTable(pageable);
        LOGGER.debug("got the result for named query: SV_AllTypesTable, result:{}", _result);
        UriComponentsBuilder _uriBuilder = ServletUriComponentsBuilder.fromRequest(_request);
        _uriBuilder.path("/{pkId}/content/{_fieldName_}");
        for(SvAllTypesTableResponse _content : _result.getContent()) {
            Map<String, Object> _properties = new HashMap(2);
            _properties.put("pkId", _content.getPkId());
            _properties.put("_fieldName_", "blobCol");
            if(_content.getBlobCol() != null) {
                _content.setBlobCol(_uriBuilder.buildAndExpand(_properties).toUriString().getBytes());
            } else {
                _content.setBlobCol(null);
            }
        }
        return _result;
    }

    @ApiOperation(value = "Retrives the BLOB content for property blobCol in query SV_AllTypesTable")
    @RequestMapping(value = "/queries/SV_AllTypesTable/{pkId}/content/blobCol", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable getBlobColContentForSV_AllTypesTable(@PathVariable("pkId") Integer pkId, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: SV_AllTypesTable");

        InputStream _result = queryService.getBlobColContentForSV_AllTypesTable(pkId);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @ApiOperation(value = "Returns downloadable file for query SV_AllTypesTable")
    @RequestMapping(value = "/queries/SV_AllTypesTable/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSV_AllTypesTable(@PathVariable("exportType") ExportType exportType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: SV_AllTypesTable");

        return queryService.exportSV_AllTypesTable(exportType, pageable);
    }

}



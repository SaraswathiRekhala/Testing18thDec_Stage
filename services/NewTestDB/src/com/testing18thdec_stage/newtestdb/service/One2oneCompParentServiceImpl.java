/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.One2oneCompChild;
import com.testing18thdec_stage.newtestdb.One2oneCompParent;
import com.testing18thdec_stage.newtestdb.One2oneCompParentId;


/**
 * ServiceImpl object for domain model class One2oneCompParent.
 *
 * @see One2oneCompParent
 */
@Service("NewTestDB.One2oneCompParentService")
@Validated
public class One2oneCompParentServiceImpl implements One2oneCompParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(One2oneCompParentServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("NewTestDB.One2oneCompChildService")
	private One2oneCompChildService one2oneCompChildService;

    @Autowired
    @Qualifier("NewTestDB.One2oneCompParentDao")
    private WMGenericDao<One2oneCompParent, One2oneCompParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<One2oneCompParent, One2oneCompParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
	public One2oneCompParent create(One2oneCompParent one2oneCompParent) {
        LOGGER.debug("Creating a new One2oneCompParent with information: {}", one2oneCompParent);
        One2oneCompChild one2oneCompChild = one2oneCompParent.getOne2oneCompChild();

        One2oneCompParent one2oneCompParentCreated = this.wmGenericDao.create(one2oneCompParent);
        if(one2oneCompChild != null) {
            LOGGER.debug("Creating a new child One2oneCompChild with information: {}", one2oneCompChild);
            one2oneCompChild.setOne2oneCompParent(one2oneCompParentCreated);
            one2oneCompChildService.create(one2oneCompChild);
        }
        return one2oneCompParentCreated;
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public One2oneCompParent getById(One2oneCompParentId one2onecompparentId) throws EntityNotFoundException {
        LOGGER.debug("Finding One2oneCompParent by id: {}", one2onecompparentId);
        One2oneCompParent one2oneCompParent = this.wmGenericDao.findById(one2onecompparentId);
        if (one2oneCompParent == null){
            LOGGER.debug("No One2oneCompParent found with id: {}", one2onecompparentId);
            throw new EntityNotFoundException(String.valueOf(one2onecompparentId));
        }
        return one2oneCompParent;
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public One2oneCompParent findById(One2oneCompParentId one2onecompparentId) {
        LOGGER.debug("Finding One2oneCompParent by id: {}", one2onecompparentId);
        return this.wmGenericDao.findById(one2onecompparentId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
	@Override
	public One2oneCompParent update(One2oneCompParent one2oneCompParent) throws EntityNotFoundException {
        LOGGER.debug("Updating One2oneCompParent with information: {}", one2oneCompParent);
        this.wmGenericDao.update(one2oneCompParent);

        One2oneCompParentId one2onecompparentId = new One2oneCompParentId();
        one2onecompparentId.setByteId(one2oneCompParent.getByteId());
        one2onecompparentId.setCharId(one2oneCompParent.getCharId());
        one2onecompparentId.setStringId(one2oneCompParent.getStringId());
        one2onecompparentId.setFloatId(one2oneCompParent.getFloatId());

        return this.wmGenericDao.findById(one2onecompparentId);
    }

    @Transactional(value = "NewTestDBTransactionManager")
	@Override
	public One2oneCompParent delete(One2oneCompParentId one2onecompparentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting One2oneCompParent with id: {}", one2onecompparentId);
        One2oneCompParent deleted = this.wmGenericDao.findById(one2onecompparentId);
        if (deleted == null) {
            LOGGER.debug("No One2oneCompParent found with id: {}", one2onecompparentId);
            throw new EntityNotFoundException(String.valueOf(one2onecompparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public Page<One2oneCompParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<One2oneCompParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all One2oneCompParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table One2oneCompParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service One2oneCompChildService instance
	 */
	protected void setOne2oneCompChildService(One2oneCompChildService service) {
        this.one2oneCompChildService = service;
    }

}


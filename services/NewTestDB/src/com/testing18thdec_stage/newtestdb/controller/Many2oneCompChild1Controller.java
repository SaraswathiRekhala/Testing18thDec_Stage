/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing18thdec_stage.newtestdb.Many2oneCompChild1;
import com.testing18thdec_stage.newtestdb.Many2oneCompChild1Id;
import com.testing18thdec_stage.newtestdb.service.Many2oneCompChild1Service;


/**
 * Controller object for domain model class Many2oneCompChild1.
 * @see Many2oneCompChild1
 */
@RestController("NewTestDB.Many2oneCompChild1Controller")
@Api(value = "Many2oneCompChild1Controller", description = "Exposes APIs to work with Many2oneCompChild1 resource.")
@RequestMapping("/NewTestDB/Many2oneCompChild1")
public class Many2oneCompChild1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompChild1Controller.class);

    @Autowired
	@Qualifier("NewTestDB.Many2oneCompChild1Service")
	private Many2oneCompChild1Service many2oneCompChild1Service;

	@ApiOperation(value = "Creates a new Many2oneCompChild1 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild1 createMany2oneCompChild1(@RequestPart("wm_data_json") Many2oneCompChild1 many2oneCompChild1, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create Many2oneCompChild1 with information: {}" , many2oneCompChild1);

    many2oneCompChild1.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		many2oneCompChild1 = many2oneCompChild1Service.create(many2oneCompChild1);
		LOGGER.debug("Created Many2oneCompChild1 with information: {}" , many2oneCompChild1);

	    return many2oneCompChild1;
	}

@ApiOperation(value = "Returns the Many2oneCompChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild1 getMany2oneCompChild1(@RequestParam("stringId") String stringId,@RequestParam("bigintId") Long bigintId) throws EntityNotFoundException {

        Many2oneCompChild1Id many2onecompchild1Id = new Many2oneCompChild1Id();
        many2onecompchild1Id.setStringId(stringId);
        many2onecompchild1Id.setBigintId(bigintId);

        LOGGER.debug("Getting Many2oneCompChild1 with id: {}" , many2onecompchild1Id);
        Many2oneCompChild1 many2oneCompChild1 = many2oneCompChild1Service.getById(many2onecompchild1Id);
        LOGGER.debug("Many2oneCompChild1 details with id: {}" , many2oneCompChild1);

        return many2oneCompChild1;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Many2oneCompChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getMany2oneCompChild1BLOBContent(@RequestParam("stringId") String stringId,@RequestParam("bigintId") Long bigintId, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws EntityNotFoundException {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Many2oneCompChild1 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Many2oneCompChild1.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        Many2oneCompChild1Id many2onecompchild1Id = new Many2oneCompChild1Id();
        many2onecompchild1Id.setStringId(stringId);
        many2onecompchild1Id.setBigintId(bigintId);

        Many2oneCompChild1 many2oneCompChild1 = many2oneCompChild1Service.getById(many2onecompchild1Id);
        WMMultipartUtils.buildHttpResponseForBlob(many2oneCompChild1, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the Many2oneCompChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild1 editMany2oneCompChild1(@RequestParam("stringId") String stringId,@RequestParam("bigintId") Long bigintId, @RequestBody Many2oneCompChild1 many2oneCompChild1) throws EntityNotFoundException {

        many2oneCompChild1.setStringId(stringId);
        many2oneCompChild1.setBigintId(bigintId);

        LOGGER.debug("Many2oneCompChild1 details with id is updated with: {}" , many2oneCompChild1);

        return many2oneCompChild1Service.update(many2oneCompChild1);
    }

    @ApiOperation(value = "Updates the Many2oneCompChild1 instance associated with the given composite-id.This API should be used when Many2oneCompChild1 instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild1 editMany2oneCompChild1(@RequestParam("stringId") String stringId,@RequestParam("bigintId") Long bigintId, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        return this.editMany2oneCompChild1AndMultiparts(stringId, bigintId, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the Many2oneCompChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Many2oneCompChild1 editMany2oneCompChild1AndMultiparts(@RequestParam("stringId") String stringId,@RequestParam("bigintId") Long bigintId, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException { 

        Many2oneCompChild1Id many2onecompchild1Id = new Many2oneCompChild1Id();
        many2onecompchild1Id.setStringId(stringId);
        many2onecompchild1Id.setBigintId(bigintId);

        Many2oneCompChild1 newMany2oneCompChild1 = WMMultipartUtils.toObject(multipartHttpServletRequest, Many2oneCompChild1.class, "NewTestDB");
        Many2oneCompChild1 oldMany2oneCompChild1 = many2oneCompChild1Service.getById(many2onecompchild1Id);

        WMMultipartUtils.updateLobsContent(oldMany2oneCompChild1, newMany2oneCompChild1);

        newMany2oneCompChild1.setStringId(stringId);
        newMany2oneCompChild1.setBigintId(bigintId);

        LOGGER.debug("Many2oneCompChild1 details with id is updated with: {}" , newMany2oneCompChild1);

        return many2oneCompChild1Service.update(newMany2oneCompChild1);
    }


    @ApiOperation(value = "Deletes the Many2oneCompChild1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMany2oneCompChild1(@RequestParam("stringId") String stringId,@RequestParam("bigintId") Long bigintId) throws EntityNotFoundException {

        Many2oneCompChild1Id many2onecompchild1Id = new Many2oneCompChild1Id();
        many2onecompchild1Id.setStringId(stringId);
        many2onecompchild1Id.setBigintId(bigintId);

        LOGGER.debug("Deleting Many2oneCompChild1 with id: {}" , many2onecompchild1Id);
        Many2oneCompChild1 many2oneCompChild1 = many2oneCompChild1Service.delete(many2onecompchild1Id);

        return many2oneCompChild1 != null;
    }


    /**
     * @deprecated Use {@link #findMany2oneCompChild1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Many2oneCompChild1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild1> searchMany2oneCompChild1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Many2oneCompChild1s list");
        return many2oneCompChild1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild1> findMany2oneCompChild1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChild1s list");
        return many2oneCompChild1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Many2oneCompChild1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Many2oneCompChild1> filterMany2oneCompChild1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Many2oneCompChild1s list");
        return many2oneCompChild1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMany2oneCompChild1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return many2oneCompChild1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Many2oneCompChild1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMany2oneCompChild1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Many2oneCompChild1s");
		return many2oneCompChild1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMany2oneCompChild1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return many2oneCompChild1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneCompChild1Service instance
	 */
	protected void setMany2oneCompChild1Service(Many2oneCompChild1Service service) {
		this.many2oneCompChild1Service = service;
	}

}


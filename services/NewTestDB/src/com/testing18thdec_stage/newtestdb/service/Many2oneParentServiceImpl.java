/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.Many2oneChild;
import com.testing18thdec_stage.newtestdb.Many2oneParent;


/**
 * ServiceImpl object for domain model class Many2oneParent.
 *
 * @see Many2oneParent
 */
@Service("NewTestDB.Many2oneParentService")
@Validated
public class Many2oneParentServiceImpl implements Many2oneParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneParentServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("NewTestDB.Many2oneChildService")
	private Many2oneChildService many2oneChildService;

    @Autowired
    @Qualifier("NewTestDB.Many2oneParentDao")
    private WMGenericDao<Many2oneParent, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Many2oneParent, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
	public Many2oneParent create(Many2oneParent many2oneParent) {
        LOGGER.debug("Creating a new Many2oneParent with information: {}", many2oneParent);
        List<Many2oneChild> many2oneChilds = many2oneParent.getMany2oneChilds();

        Many2oneParent many2oneParentCreated = this.wmGenericDao.create(many2oneParent);
        if(many2oneChilds != null) {
            for(Many2oneChild _many2oneChild : many2oneChilds) {
                _many2oneChild.setMany2oneParent(many2oneParentCreated);
                LOGGER.debug("Creating a new child Many2oneChild with information: {}", _many2oneChild);
                many2oneChildService.create(_many2oneChild);
            }
        }
        return many2oneParentCreated;
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public Many2oneParent getById(String many2oneparentId) throws EntityNotFoundException {
        LOGGER.debug("Finding Many2oneParent by id: {}", many2oneparentId);
        Many2oneParent many2oneParent = this.wmGenericDao.findById(many2oneparentId);
        if (many2oneParent == null){
            LOGGER.debug("No Many2oneParent found with id: {}", many2oneparentId);
            throw new EntityNotFoundException(String.valueOf(many2oneparentId));
        }
        return many2oneParent;
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public Many2oneParent findById(String many2oneparentId) {
        LOGGER.debug("Finding Many2oneParent by id: {}", many2oneparentId);
        return this.wmGenericDao.findById(many2oneparentId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
	@Override
	public Many2oneParent update(Many2oneParent many2oneParent) throws EntityNotFoundException {
        LOGGER.debug("Updating Many2oneParent with information: {}", many2oneParent);
        this.wmGenericDao.update(many2oneParent);

        String many2oneparentId = many2oneParent.getStringId();

        return this.wmGenericDao.findById(many2oneparentId);
    }

    @Transactional(value = "NewTestDBTransactionManager")
	@Override
	public Many2oneParent delete(String many2oneparentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Many2oneParent with id: {}", many2oneparentId);
        Many2oneParent deleted = this.wmGenericDao.findById(many2oneparentId);
        if (deleted == null) {
            LOGGER.debug("No Many2oneParent found with id: {}", many2oneparentId);
            throw new EntityNotFoundException(String.valueOf(many2oneparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public Page<Many2oneParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneChild> findAssociatedMany2oneChilds(String stringId, Pageable pageable) {
        LOGGER.debug("Fetching all associated many2oneChilds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("many2oneParent.stringId = '" + stringId + "'");

        return many2oneChildService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneChildService instance
	 */
	protected void setMany2oneChildService(Many2oneChildService service) {
        this.many2oneChildService = service;
    }

}


/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.One2oneVirtualParent;

/**
 * Service object for domain model class {@link One2oneVirtualParent}.
 */
public interface One2oneVirtualParentService {

    /**
     * Creates a new One2oneVirtualParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneVirtualParent if any.
     *
     * @param one2oneVirtualParent Details of the One2oneVirtualParent to be created; value cannot be null.
     * @return The newly created One2oneVirtualParent.
     */
	One2oneVirtualParent create(@Valid One2oneVirtualParent one2oneVirtualParent);


	/**
	 * Returns One2oneVirtualParent by given id if exists.
	 *
	 * @param one2onevirtualparentId The id of the One2oneVirtualParent to get; value cannot be null.
	 * @return One2oneVirtualParent associated with the given one2onevirtualparentId.
     * @throws EntityNotFoundException If no One2oneVirtualParent is found.
	 */
	One2oneVirtualParent getById(String one2onevirtualparentId) throws EntityNotFoundException;

    /**
	 * Find and return the One2oneVirtualParent by given id if exists, returns null otherwise.
	 *
	 * @param one2onevirtualparentId The id of the One2oneVirtualParent to get; value cannot be null.
	 * @return One2oneVirtualParent associated with the given one2onevirtualparentId.
	 */
	One2oneVirtualParent findById(String one2onevirtualparentId);


	/**
	 * Updates the details of an existing One2oneVirtualParent. It replaces all fields of the existing One2oneVirtualParent with the given one2oneVirtualParent.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneVirtualParent if any.
     *
	 * @param one2oneVirtualParent The details of the One2oneVirtualParent to be updated; value cannot be null.
	 * @return The updated One2oneVirtualParent.
	 * @throws EntityNotFoundException if no One2oneVirtualParent is found with given input.
	 */
	One2oneVirtualParent update(@Valid One2oneVirtualParent one2oneVirtualParent) throws EntityNotFoundException;

    /**
	 * Deletes an existing One2oneVirtualParent with the given id.
	 *
	 * @param one2onevirtualparentId The id of the One2oneVirtualParent to be deleted; value cannot be null.
	 * @return The deleted One2oneVirtualParent.
	 * @throws EntityNotFoundException if no One2oneVirtualParent found with the given id.
	 */
	One2oneVirtualParent delete(String one2onevirtualparentId) throws EntityNotFoundException;

	/**
	 * Find all One2oneVirtualParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneVirtualParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<One2oneVirtualParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all One2oneVirtualParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneVirtualParents.
     *
     * @see Pageable
     * @see Page
	 */
    Page<One2oneVirtualParent> findAll(String query, Pageable pageable);

    /**
	 * Exports all One2oneVirtualParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the One2oneVirtualParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the One2oneVirtualParent.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}


/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdbpostgres.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdbpostgres.DatetimeTabaleReverse;

/**
 * Service object for domain model class {@link DatetimeTabaleReverse}.
 */
public interface DatetimeTabaleReverseService {

    /**
     * Creates a new DatetimeTabaleReverse. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on DatetimeTabaleReverse if any.
     *
     * @param datetimeTabaleReverse Details of the DatetimeTabaleReverse to be created; value cannot be null.
     * @return The newly created DatetimeTabaleReverse.
     */
	DatetimeTabaleReverse create(@Valid DatetimeTabaleReverse datetimeTabaleReverse);


	/**
	 * Returns DatetimeTabaleReverse by given id if exists.
	 *
	 * @param datetimetabalereverseId The id of the DatetimeTabaleReverse to get; value cannot be null.
	 * @return DatetimeTabaleReverse associated with the given datetimetabalereverseId.
     * @throws EntityNotFoundException If no DatetimeTabaleReverse is found.
	 */
	DatetimeTabaleReverse getById(String datetimetabalereverseId) throws EntityNotFoundException;

    /**
	 * Find and return the DatetimeTabaleReverse by given id if exists, returns null otherwise.
	 *
	 * @param datetimetabalereverseId The id of the DatetimeTabaleReverse to get; value cannot be null.
	 * @return DatetimeTabaleReverse associated with the given datetimetabalereverseId.
	 */
	DatetimeTabaleReverse findById(String datetimetabalereverseId);


	/**
	 * Updates the details of an existing DatetimeTabaleReverse. It replaces all fields of the existing DatetimeTabaleReverse with the given datetimeTabaleReverse.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on DatetimeTabaleReverse if any.
     *
	 * @param datetimeTabaleReverse The details of the DatetimeTabaleReverse to be updated; value cannot be null.
	 * @return The updated DatetimeTabaleReverse.
	 * @throws EntityNotFoundException if no DatetimeTabaleReverse is found with given input.
	 */
	DatetimeTabaleReverse update(@Valid DatetimeTabaleReverse datetimeTabaleReverse) throws EntityNotFoundException;

    /**
	 * Deletes an existing DatetimeTabaleReverse with the given id.
	 *
	 * @param datetimetabalereverseId The id of the DatetimeTabaleReverse to be deleted; value cannot be null.
	 * @return The deleted DatetimeTabaleReverse.
	 * @throws EntityNotFoundException if no DatetimeTabaleReverse found with the given id.
	 */
	DatetimeTabaleReverse delete(String datetimetabalereverseId) throws EntityNotFoundException;

	/**
	 * Find all DatetimeTabaleReverses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DatetimeTabaleReverses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<DatetimeTabaleReverse> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all DatetimeTabaleReverses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching DatetimeTabaleReverses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<DatetimeTabaleReverse> findAll(String query, Pageable pageable);

    /**
	 * Exports all DatetimeTabaleReverses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the DatetimeTabaleReverses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the DatetimeTabaleReverse.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}


/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.One2oneCompParent;
import com.testing18thdec_stage.newtestdb.One2oneCompParentId;

/**
 * Service object for domain model class {@link One2oneCompParent}.
 */
public interface One2oneCompParentService {

    /**
     * Creates a new One2oneCompParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneCompParent if any.
     *
     * @param one2oneCompParent Details of the One2oneCompParent to be created; value cannot be null.
     * @return The newly created One2oneCompParent.
     */
	One2oneCompParent create(@Valid One2oneCompParent one2oneCompParent);


	/**
	 * Returns One2oneCompParent by given id if exists.
	 *
	 * @param one2onecompparentId The id of the One2oneCompParent to get; value cannot be null.
	 * @return One2oneCompParent associated with the given one2onecompparentId.
     * @throws EntityNotFoundException If no One2oneCompParent is found.
	 */
	One2oneCompParent getById(One2oneCompParentId one2onecompparentId) throws EntityNotFoundException;

    /**
	 * Find and return the One2oneCompParent by given id if exists, returns null otherwise.
	 *
	 * @param one2onecompparentId The id of the One2oneCompParent to get; value cannot be null.
	 * @return One2oneCompParent associated with the given one2onecompparentId.
	 */
	One2oneCompParent findById(One2oneCompParentId one2onecompparentId);


	/**
	 * Updates the details of an existing One2oneCompParent. It replaces all fields of the existing One2oneCompParent with the given one2oneCompParent.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on One2oneCompParent if any.
     *
	 * @param one2oneCompParent The details of the One2oneCompParent to be updated; value cannot be null.
	 * @return The updated One2oneCompParent.
	 * @throws EntityNotFoundException if no One2oneCompParent is found with given input.
	 */
	One2oneCompParent update(@Valid One2oneCompParent one2oneCompParent) throws EntityNotFoundException;

    /**
	 * Deletes an existing One2oneCompParent with the given id.
	 *
	 * @param one2onecompparentId The id of the One2oneCompParent to be deleted; value cannot be null.
	 * @return The deleted One2oneCompParent.
	 * @throws EntityNotFoundException if no One2oneCompParent found with the given id.
	 */
	One2oneCompParent delete(One2oneCompParentId one2onecompparentId) throws EntityNotFoundException;

	/**
	 * Find all One2oneCompParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneCompParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<One2oneCompParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all One2oneCompParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching One2oneCompParents.
     *
     * @see Pageable
     * @see Page
	 */
    Page<One2oneCompParent> findAll(String query, Pageable pageable);

    /**
	 * Exports all One2oneCompParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the One2oneCompParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the One2oneCompParent.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}


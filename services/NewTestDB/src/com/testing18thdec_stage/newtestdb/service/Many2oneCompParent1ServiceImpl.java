/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdb.Many2oneCompChild1;
import com.testing18thdec_stage.newtestdb.Many2oneCompParent1;
import com.testing18thdec_stage.newtestdb.Many2oneCompParent1Id;


/**
 * ServiceImpl object for domain model class Many2oneCompParent1.
 *
 * @see Many2oneCompParent1
 */
@Service("NewTestDB.Many2oneCompParent1Service")
@Validated
public class Many2oneCompParent1ServiceImpl implements Many2oneCompParent1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Many2oneCompParent1ServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("NewTestDB.Many2oneCompChild1Service")
	private Many2oneCompChild1Service many2oneCompChild1Service;

    @Autowired
    @Qualifier("NewTestDB.Many2oneCompParent1Dao")
    private WMGenericDao<Many2oneCompParent1, Many2oneCompParent1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Many2oneCompParent1, Many2oneCompParent1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "NewTestDBTransactionManager")
    @Override
	public Many2oneCompParent1 create(Many2oneCompParent1 many2oneCompParent1) {
        LOGGER.debug("Creating a new Many2oneCompParent1 with information: {}", many2oneCompParent1);
        List<Many2oneCompChild1> many2oneCompChild1s = many2oneCompParent1.getMany2oneCompChild1s();

        Many2oneCompParent1 many2oneCompParent1Created = this.wmGenericDao.create(many2oneCompParent1);
        if(many2oneCompChild1s != null) {
            for(Many2oneCompChild1 _many2oneCompChild1 : many2oneCompChild1s) {
                _many2oneCompChild1.setMany2oneCompParent1(many2oneCompParent1Created);
                LOGGER.debug("Creating a new child Many2oneCompChild1 with information: {}", _many2oneCompChild1);
                many2oneCompChild1Service.create(_many2oneCompChild1);
            }
        }
        return many2oneCompParent1Created;
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public Many2oneCompParent1 getById(Many2oneCompParent1Id many2onecompparent1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Many2oneCompParent1 by id: {}", many2onecompparent1Id);
        Many2oneCompParent1 many2oneCompParent1 = this.wmGenericDao.findById(many2onecompparent1Id);
        if (many2oneCompParent1 == null){
            LOGGER.debug("No Many2oneCompParent1 found with id: {}", many2onecompparent1Id);
            throw new EntityNotFoundException(String.valueOf(many2onecompparent1Id));
        }
        return many2oneCompParent1;
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public Many2oneCompParent1 findById(Many2oneCompParent1Id many2onecompparent1Id) {
        LOGGER.debug("Finding Many2oneCompParent1 by id: {}", many2onecompparent1Id);
        return this.wmGenericDao.findById(many2onecompparent1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "NewTestDBTransactionManager")
	@Override
	public Many2oneCompParent1 update(Many2oneCompParent1 many2oneCompParent1) throws EntityNotFoundException {
        LOGGER.debug("Updating Many2oneCompParent1 with information: {}", many2oneCompParent1);
        this.wmGenericDao.update(many2oneCompParent1);

        Many2oneCompParent1Id many2onecompparent1Id = new Many2oneCompParent1Id();
        many2onecompparent1Id.setStringPk(many2oneCompParent1.getStringPk());
        many2onecompparent1Id.setBigintPk(many2oneCompParent1.getBigintPk());
        many2onecompparent1Id.setCharPk(many2oneCompParent1.getCharPk());
        many2onecompparent1Id.setBooleanPk(many2oneCompParent1.getBooleanPk());

        return this.wmGenericDao.findById(many2onecompparent1Id);
    }

    @Transactional(value = "NewTestDBTransactionManager")
	@Override
	public Many2oneCompParent1 delete(Many2oneCompParent1Id many2onecompparent1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Many2oneCompParent1 with id: {}", many2onecompparent1Id);
        Many2oneCompParent1 deleted = this.wmGenericDao.findById(many2onecompparent1Id);
        if (deleted == null) {
            LOGGER.debug("No Many2oneCompParent1 found with id: {}", many2onecompparent1Id);
            throw new EntityNotFoundException(String.valueOf(many2onecompparent1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public Page<Many2oneCompParent1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompParent1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneCompParent1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Many2oneCompParent1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service NewTestDB for table Many2oneCompParent1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "NewTestDBTransactionManager")
    @Override
    public Page<Many2oneCompChild1> findAssociatedMany2oneCompChild1s(String stringPk, Long bigintPk, String charPk, Boolean booleanPk, Pageable pageable) {
        LOGGER.debug("Fetching all associated many2oneCompChild1s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("many2oneCompParent1.stringPk = '" + stringPk + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("many2oneCompParent1.bigintPk = '" + bigintPk + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("many2oneCompParent1.charPk = '" + charPk + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("many2oneCompParent1.booleanPk = '" + booleanPk + "'");

        return many2oneCompChild1Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Many2oneCompChild1Service instance
	 */
	protected void setMany2oneCompChild1Service(Many2oneCompChild1Service service) {
        this.many2oneCompChild1Service = service;
    }

}


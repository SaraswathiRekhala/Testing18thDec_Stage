/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing18thdec_stage.newtestdbpostgres.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdbpostgres.AllTypesTable;


/**
 * ServiceImpl object for domain model class AllTypesTable.
 *
 * @see AllTypesTable
 */
@Service("newtestdbpostgres.AllTypesTableService")
@Validated
public class AllTypesTableServiceImpl implements AllTypesTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypesTableServiceImpl.class);


    @Autowired
    @Qualifier("newtestdbpostgres.AllTypesTableDao")
    private WMGenericDao<AllTypesTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllTypesTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "newtestdbpostgresTransactionManager")
    @Override
	public AllTypesTable create(AllTypesTable allTypesTable) {
        LOGGER.debug("Creating a new AllTypesTable with information: {}", allTypesTable);

        AllTypesTable allTypesTableCreated = this.wmGenericDao.create(allTypesTable);
        return allTypesTableCreated;
    }

	@Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
	@Override
	public AllTypesTable getById(Integer alltypestableId) throws EntityNotFoundException {
        LOGGER.debug("Finding AllTypesTable by id: {}", alltypestableId);
        AllTypesTable allTypesTable = this.wmGenericDao.findById(alltypestableId);
        if (allTypesTable == null){
            LOGGER.debug("No AllTypesTable found with id: {}", alltypestableId);
            throw new EntityNotFoundException(String.valueOf(alltypestableId));
        }
        return allTypesTable;
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
	@Override
	public AllTypesTable findById(Integer alltypestableId) {
        LOGGER.debug("Finding AllTypesTable by id: {}", alltypestableId);
        return this.wmGenericDao.findById(alltypestableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "newtestdbpostgresTransactionManager")
	@Override
	public AllTypesTable update(AllTypesTable allTypesTable) throws EntityNotFoundException {
        LOGGER.debug("Updating AllTypesTable with information: {}", allTypesTable);
        this.wmGenericDao.update(allTypesTable);

        Integer alltypestableId = allTypesTable.getPkId();

        return this.wmGenericDao.findById(alltypestableId);
    }

    @Transactional(value = "newtestdbpostgresTransactionManager")
	@Override
	public AllTypesTable delete(Integer alltypestableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AllTypesTable with id: {}", alltypestableId);
        AllTypesTable deleted = this.wmGenericDao.findById(alltypestableId);
        if (deleted == null) {
            LOGGER.debug("No AllTypesTable found with id: {}", alltypestableId);
            throw new EntityNotFoundException(String.valueOf(alltypestableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
	@Override
	public Page<AllTypesTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllTypesTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
    @Override
    public Page<AllTypesTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllTypesTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service newtestdbpostgres for table AllTypesTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


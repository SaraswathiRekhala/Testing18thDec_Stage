/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.testing18thdec_stage.newtestdbpostgres.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing18thdec_stage.newtestdbpostgres.models.query.*;

@Service
public class NewtestdbpostgresQueryExecutorServiceImpl implements NewtestdbpostgresQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NewtestdbpostgresQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("newtestdbpostgresWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
    @Override
    public SvGetSingleRecordResponse executeSV_GetSingleRecord(Integer pkId) {
        Map params = new HashMap(1);

        params.put("PK_ID", pkId);

        return queryExecutor.executeNamedQuery("SV_GetSingleRecord", params, SvGetSingleRecordResponse.class);
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
    @Override
    public InputStream getBlobColContentForSV_GetSingleRecord(Integer pkId) throws EntityNotFoundException {
        Map params = new HashMap(1);

        params.put("PK_ID", pkId);

        SvGetSingleRecordResponse _result =  queryExecutor.executeNamedQuery("SV_GetSingleRecord", params, SvGetSingleRecordResponse.class);
        if(_result.getBlobCol() == null) {
            LOGGER.debug("Blob content not exists for blobCol in query SV_GetSingleRecord");
            throw new BlobContentNotFoundException("Blob content not found for blobCol in query SV_GetSingleRecord");
        }
        return new ByteArrayInputStream(_result.getBlobCol());
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
    @Override
    public Page<SvAllTypesTableResponse> executeSV_AllTypesTable(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("SV_AllTypesTable", params, SvAllTypesTableResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
    @Override
    public InputStream getBlobColContentForSV_AllTypesTable(Integer pkId) throws EntityNotFoundException {
        Map params = new HashMap(0);

        params.put("pkId", pkId);

        SvAllTypesTableResponse _result =  queryExecutor.executeNamedQuery("SV_AllTypesTable__identifier", params, SvAllTypesTableResponse.class);
        if(_result.getBlobCol() == null) {
            LOGGER.debug("Blob content not exists for blobCol in query SV_AllTypesTable");
            throw new BlobContentNotFoundException("Blob content not found for blobCol in query SV_AllTypesTable");
        }
        return new ByteArrayInputStream(_result.getBlobCol());
    }

    @Transactional(readOnly = true, value = "newtestdbpostgresTransactionManager")
    @Override
    public Downloadable exportSV_AllTypesTable(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("SV_AllTypesTable", params, exportType, SvAllTypesTableResponse.class, pageable);
    }

}


